<?xml version="1.0"?>
<project name="${name}" default="default">
	<!-- 运行时环境变量 -->
	<property environment="env"/>
	<property file="build.properties"/>
	<!-- 打包android版本 -->
	<target name="android" description="build debug and release version for android">
		<!-- 引入安卓配置 -->
		<property file="android.properties"/>
		<property name="temp" value="${basedir}/temp"/>
		<property name="gen" value="${temp}/gen"/>
		<property name="classes" value="${temp}/classes"/>
		
		<!-- 初始化temp文件夹 -->
		<delete dir="${temp}"/>
		<mkdir dir="${gen}"/>
		<mkdir dir="${classes}"/>

		<!-- 生成R.java，目标文件夹必须提前初始化，否则会报错 -->
		<echo message="========== 生成R.java文件 =========="/>
		<exec executable="${aapt}" failonerror="true">
            <arg value="package"/>
            <arg value="-f"/>
            <arg value="-m"/>
            <arg value="-J"/>
            <arg value="${gen}"/>
            <arg value="-S"/>
            <arg value="${root}/res"/>
            <arg value="-M"/>
            <arg value="${root}/AndroidManifest.xml"/>
            <arg value="-I"/>
            <arg value="${android-jar}"/>
        </exec>
		
		<!-- 编译.aidl文件为.java文件，egret项目中一般是没有.aidl文件的 -->
		<echo message="========== 编译.aidl文件 =========="/>
		<apply executable="${aidl}" failonerror="true">
			<!-- 这里的参数key/value之间不能有空格 -->
			<!-- 指定预处理文件 -->
			<arg value="-p${framework-aidl}"/>
			<!-- aidl声明的目录 -->
			<arg value="-I${root}/src"/>
			<!-- 目标文件目录 -->
			<arg value="-o${gen}"/>
			<!-- 指定哪些文件需要编译 -->
			<fileset dir="${root}/src">
				<include name="**/*.aidl"/>
			</fileset>
		</apply>

		<!-- 使用javac编译.java文件 -->
		<echo message="========== 编译.java文件 =========="/>
		<javac encoding="utf-8" target="1.7" srcdir="${root}/src" destdir="${classes}" includeantruntime="false" bootclasspath="${android-jar}">
			<classpath>
				<fileset dir="${root}/libs" includes="*.jar"/>
			</classpath>
		</javac>
		<!-- 编译R.java -->
		<javac encoding="utf-8" target="1.7" srcdir="${gen}" destdir="${classes}" includeantruntime="false" bootclasspath="${android-jar}"/>

		<!-- 将.class文件转换成classes.dex -->
		<echo message="========== 生成classes.dex文件 =========="/>
		<exec executable="${dx}" failonerror="true">
			<arg value="--dex"/>
			<!-- 输出文件 -->
			<arg value="--output=${classes}/classes.dex"/>
			<!-- 要生成.dex文件的源classes和libraries -->
			<arg value="${classes}"/>
			<arg value="${root}/libs"/>
		</exec>

		<!-- 资源文件打包，生成资源包文件resource.ap_ -->
		<echo message="========== 生成resource.ap_文件 =========="/>
		<exec executable="${aapt}" failonerror="true">  
			<arg value="package"/>
			<arg value="-f"/>
			<arg value="-M"/>
			<arg value="${root}/AndroidManifest.xml"/>
			<arg value="-S"/>
			<arg value="${root}/res"/>
			<arg value="-A"/>
			<arg value="${root}/assets"/>
			<arg value="-I"/>
			<arg value="${android-jar}"/>
			<arg value="-F"/>
			<arg value="${classes}/resources.ap_"/>
		</exec>

		<!-- 用sdklib.jar打包resources.ap_和classes.dex文件,生成unsigned.apk"/> -->
		<echo message="========== 生成未签名的.apk文件 =========="/>
		<java classpath="${sdklib}" classname="com.android.sdklib.build.ApkBuilderMain">
			<arg value="${temp}/unsigned.apk"/>
			<arg value="-v"/>
			<arg value="-u"/>
			<arg value="-z"/>
			<arg value="${classes}/resources.ap_"/>
			<arg value="-f"/>
			<arg value="${classes}/classes.dex"/>
			<arg value="-rf"/>
			<arg value="${gen}"/>
			<!-- <arg value="-rj"/>
			<arg value="${root}/libs"/> -->
			<arg value="-nf"/>
			<arg value="${root}/libs"/>
		</java>

		<!-- 用jarsinger命令对apk认证,生成signed.apk -->
		<echo message="========== apk签名 =========="/>
		<exec executable="${jarsigner}" failonerror="true">
			<arg value="-keystore"/>
			<arg value="${keystore}"/>
			<arg value="-storepass"/>
			<arg value="${storepass}"/>
			<arg value="-keypass"/>
			<arg value="${keypass}"/>
			<arg value="-signedjar"/>
			<arg value="${basedir}/${name}_${version}.apk"/>
			<arg value="${temp}/unsigned.apk"/>
			<arg value="${alias}"/>
		</exec>

		<!-- 清理工作 -->
		<delete dir="${temp}"/>
	</target>

	<!-- 打包ios版本 -->
	<target name="ios">
		<!-- 引入安卓配置 -->
		<property file="ios.properties"/>
		<property name="app" value="${root}/build/${name}_${version}.app"/>
		<property name="ipa" value="${basedir}/${name}_${version}.ipa"/>
		<!-- xcodebuild clean -->
		<exec executable="/bin/bash" dir="${root}">
			<arg value="-c"/>
			<arg value="xcodebuild clean"/>
		</exec>
		<!-- 生成.app -->
		<exec executable="/bin/bash" dir="${root}">
			<arg value="-c"/>
			<arg value="xcodebuild CODE_SIGN_IDENTITY='${sign}' PROVISIONING_PROFILE=${provisionUUID}"/>
		</exec>
		<!-- 生成.ipa -->
		<exec executable="/bin/bash" dir="${root}">
			<arg value="-c"/>
			<arg value="xcrun -sdk iphoneos PackageApplication -v ${root} -o ${ipa}"/>
		</exec>
	</target>

	<!-- default -->
	<target name="default">
		<echo message="请添加一个参数：android | ios"/>
	</target>
</project>